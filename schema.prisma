generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model CapDetails {
  id                String   @id
  sizes             String[]
  colors            String[]
  material          String?
  adjustable        Boolean  @default(true)
  style             String?
  customizationArea Json
  productId         String   @unique
  Product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          String       @id
  name        String       @unique
  description String?
  image       String?
  createdAt   DateTime     @default(now())
  Collection  Collection[]
  Product     Product[]
}

model Collection {
  id          String    @id
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  categoryId  String
  Category    Category  @relation(fields: [categoryId], references: [id])
  Product     Product[]

  @@unique([categoryId, name])
}

model Design {
  id                  String                @id
  name                String
  image               String
  category            String
  tags                String[]
  createdAt           DateTime              @default(now())
  userId              String?
  DesignCustomization DesignCustomization[]
}

model DesignCustomization {
  id          String     @id
  designId    String
  positionX   Float      @default(0)
  positionY   Float      @default(0)
  width       Float
  height      Float
  rotation    Float      @default(0)
  orderItemId String?
  Design      Design     @relation(fields: [designId], references: [id], onDelete: Cascade)
  OrderItem   OrderItem? @relation(fields: [orderItemId], references: [id])
}

model Designer {
  id          String    @id
  name        String
  description String?
  photo       String?
  country     String    @default("Peru")
  createdAt   DateTime  @default(now())
  Product     Product[]
}

model Order {
  id              String      @id
  status          String
  totalAmount     Float
  shippingAddress String
  orderDate       DateTime    @default(now())
  deliveryDate    DateTime?
  userId          String
  OrderItem       OrderItem[]
}

model OrderItem {
  id                  String                @id
  quantity            Int
  unitPrice           Float
  customization       Json?
  orderId             String
  productId           String
  DesignCustomization DesignCustomization[]
  Order               Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product             Product               @relation(fields: [productId], references: [id])
}

model PoloShirtDetails {
  id                 String   @id
  sizes              String[]
  colors             String[]
  material           String
  sleeveType         String?
  customizationAreas Json
  collar             Boolean  @default(true)
  fit                String?
  productId          String   @unique
  Product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id                  String               @id
  name                String
  description         String
  price               Float
  images              String[]
  stock               Int
  tags                String[]
  productType         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  featured            Boolean              @default(false)
  isCustomizable      Boolean              @default(true)
  categoryId          String
  collectionId        String?
  designerId          String?
  CapDetails          CapDetails?
  OrderItem           OrderItem[]
  PoloShirtDetails    PoloShirtDetails?
  Category            Category             @relation(fields: [categoryId], references: [id])
  Collection          Collection?          @relation(fields: [collectionId], references: [id])
  Designer            Designer?            @relation(fields: [designerId], references: [id])
  ProductFavorite     ProductFavorite[]
  StickerDetails      StickerDetails?
  StickerSheetDetails StickerSheetDetails?
  SweatshirtDetails   SweatshirtDetails?
  ThermosDetails      ThermosDetails?
}

model ProductFavorite {
  id        String   @id
  userId    String
  productId String
  addedAt   DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model StickerDetails {
  id           String  @id
  dimensions   Json
  adhesiveType String
  material     String
  waterproof   Boolean @default(false)
  customShape  Boolean @default(true)
  shape        String?
  finishType   String?
  productId    String  @unique
  Product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model StickerSheetDetails {
  id              String  @id
  sheetDimensions Json
  stickerCount    Int
  individualSizes Json?
  adhesiveType    String
  material        String
  waterproof      Boolean @default(false)
  productId       String  @unique
  Product         Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model SweatshirtDetails {
  id                 String   @id
  sizes              String[]
  colors             String[]
  material           String
  hasHood            Boolean  @default(false)
  pockets            Boolean  @default(true)
  customizationAreas Json
  thickness          String?
  productId          String   @unique
  Product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ThermosDetails {
  id                String   @id
  capacity          Int
  colors            String[]
  material          String
  insulated         Boolean  @default(true)
  customizationArea Json
  lidType           String?
  productId         String   @unique
  Product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
