generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Producto {
  id             String          @id @default(uuid())
  nombre         String
  descripcion    String
  precio         Float
  imagenes       String[]
  stock          Int
  categoria      String
  fechaCreacion  DateTime        @default(now())
  destacado      Boolean         @default(false)
  tipoProducto   String          @default("personalizable")
  disenadorId    String?
  detalleGorra   DetalleGorra?
  detallePolera  DetallePolera?
  detallePolo    DetallePolo?
  detalleSticker DetalleSticker?
  detalleTermo   DetalleTermo?
  itemsCarrito   ItemCarrito[]
  itemsPedido    ItemPedido[]
  disenador      Disenador?      @relation(fields: [disenadorId], references: [id])
}

model Disenador {
  id            String     @id @default(uuid())
  nombre        String
  descripcion   String?
  foto          String?
  pais          String     @default("Per√∫")
  fechaRegistro DateTime   @default(now())
  productos     Producto[]
}

model Diseno {
  id                String                  @id @default(uuid())
  nombre            String
  imagen            String
  categoria         String
  tags              String[]
  fechaCreacion     DateTime                @default(now())
  usuarioId         String?
  usuario           Usuario?                @relation(fields: [usuarioId], references: [id])
  personalizaciones PersonalizacionDiseno[]
}

model PersonalizacionDiseno {
  id            String       @id @default(uuid())
  disenoId      String
  posicionX     Float        @default(0)
  posicionY     Float        @default(0)
  ancho         Float
  alto          Float
  rotacion      Float        @default(0)
  itemCarritoId String?
  diseno        Diseno       @relation(fields: [disenoId], references: [id], onDelete: Cascade)
  itemCarrito   ItemCarrito? @relation(fields: [itemCarritoId], references: [id])
}

model DetalleGorra {
  id                  String   @id @default(uuid())
  tamanos             String[]
  colores             String[]
  areaPersonalizacion Json
  productoId          String   @unique
  producto            Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
}

model DetallePolo {
  id                   String   @id @default(uuid())
  tamanos              String[]
  colores              String[]
  material             String
  areasPersonalizacion Json
  productoId           String   @unique
  producto             Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
}

model DetallePolera {
  id                   String   @id @default(uuid())
  tamanos              String[]
  colores              String[]
  material             String
  conCapucha           Boolean  @default(false)
  areasPersonalizacion Json
  productoId           String   @unique
  producto             Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
}

model DetalleSticker {
  id                  String   @id @default(uuid())
  dimensiones         Json
  tipoAdhesivo        String
  resistenciaAgua     Boolean  @default(false)
  formaPersonalizable Boolean  @default(true)
  productoId          String   @unique
  producto            Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
}

model DetalleTermo {
  id                  String   @id @default(uuid())
  capacidad           Int
  colores             String[]
  material            String
  areaPersonalizacion Json
  productoId          String   @unique
  producto            Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
}

model Usuario {
  id            String    @id @default(uuid())
  email         String    @unique
  nombre        String
  apellidos     String
  direccion     String?
  telefono      String?
  fechaCreacion DateTime  @default(now())
  carritos      Carrito[]
  disenos       Diseno[]
  pedidos       Pedido[]
}

model Carrito {
  id            String        @id @default(uuid())
  fechaCreacion DateTime      @default(now())
  usuarioId     String
  usuario       Usuario       @relation(fields: [usuarioId], references: [id])
  items         ItemCarrito[]
}

model ItemCarrito {
  id                String                  @id @default(uuid())
  cantidad          Int
  personalizacion   Json?
  carritoId         String
  productoId        String
  carrito           Carrito                 @relation(fields: [carritoId], references: [id], onDelete: Cascade)
  producto          Producto                @relation(fields: [productoId], references: [id])
  personalizaciones PersonalizacionDiseno[]
}

model Pedido {
  id             String       @id @default(uuid())
  estado         String
  totalPagado    Float
  direccionEnvio String
  fechaPedido    DateTime     @default(now())
  fechaEntrega   DateTime?
  usuarioId      String
  items          ItemPedido[]
  usuario        Usuario      @relation(fields: [usuarioId], references: [id])
}

model ItemPedido {
  id              String   @id @default(uuid())
  cantidad        Int
  precioUnitario  Float
  personalizacion Json?
  pedidoId        String
  productoId      String
  pedido          Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  producto        Producto @relation(fields: [productoId], references: [id])
}

model ImagenPersonalizacion {
  id                 String    @id @default(uuid())
  nombre             String
  ruta               String
  categoria          String
  tags               String[]
  color              String?
  estilo             String?
  orientacion        String?
  favoritos          Int       @default(0)
  ancho              Int
  alto               Int
  fechaCreacion      DateTime  @default(now())
  fechaActualizacion DateTime  @updatedAt
  coleccion          String?
  autor              String?
  licencia           String?
  premium            Boolean   @default(false)
  vecesUsado         Int       @default(0)
  ultimoUso          DateTime?
}
